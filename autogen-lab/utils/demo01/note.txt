官方文档（需要魔法）：

https://microsoft.github.io/autogen/stable/index.html

没有魔法的使用这个代理后的文档：

https://autogen.linsoap.social/autogen/stable/index.html

1.环境准备
1.项目创建
参考文档：https://autogen.linsoap.social/autogen/stable/user-guide/agentchat-user-guide/installation.html

能直接执行python3 -m venv .venv的，直接使用venv的方式创建项目

有conda环境的参考文档中的conda创建项目

2.Pip库安装
安装autogen-agentchat和autogen-ext[openai]库

pip install -U "autogen-agentchat"
pip install "autogen-ext[openai]"
完成环境搭建后开始了解Autogen这个框架

2.Autogen框架核心概念
1.多Agent协作形式
coze目前基本上是基于工作流的形式去完成任务，现在行业的发展方向是使用多agent进行协作去完成任务，其核心思想是每一个Agent都是一个专家，专门做一个主题的事情。然后把这些专家组织起来，合理的分配任务，最终完成任务。其中专家就是Agent，这些专家组成的团队就叫Team。Autogen就是以这个思想设计的框架。

2.Autogen是如何实现多Agent协作的
Autogen是一个模块化的多智能体协作框架，可以像搭乐高一样排列组合出一个多智能体团队，其中有一些核心模块：

模型客户端（用于配置大模型，选择要接入的大模型）

单Agent（用于配置所选的大模型，可用工具，定制系统提示词）

文档：https://autogen.linsoap.social/autogen/stable/user-guide/agentchat-user-guide/tutorial/agents.html

Team（由多个单agent组成）

文档：https://autogen.linsoap.social/autogen/stable/user-guide/agentchat-user-guide/tutorial/teams.html

RoundRobinGroupChat

SelectorGroupChat

MegenticOneGourpChat

Swarm

Messages（与Agent和Team交互时产生的消息）

文档：https://autogen.linsoap.social/autogen/stable/reference/python/autogen_agentchat.messages.html

TextMessage

ThoughEvent

ToolCallRequestEvent

ToolCallExecutionEvent

终止条件 （让Team知道何时任务已经结束）

文档：https://autogen.linsoap.social/autogen/stable/user-guide/agentchat-user-guide/tutorial/termination.html

3.与单Agent进行对话
文档：https://autogen.linsoap.social/autogen/stable/reference/python/autogen_agentchat.agents.html#autogen_agentchat.agents.AssistantAgent

Assistant是最常用的Agent，首先观察AssistantAgent所支持的参数，



对于定义一个简单的单Agent，其中比较关键的参数是

name（agent名字）

model_client（agent所调用的大模型）

tools（agent所能使用的工具）

system_message（系统提示词）

description（对于这个Agent的描述，这个描述对于单Agent任务没有太大意义，但是对于多Agent协作有比较重要的作用）

其中的name和description是字符串类型，随意取名都行。

接下来需要配置model_client和tools，配置Agent所能调用的模型和工具

1.model_client配置
使用模型可以使用apikey，这里使用硅基流动作为模型提供商https://siliconflow.cn/，根据文档获取api_key,base_url,model_name

硅基流动文档：

获取base_url和model_name，https://docs.siliconflow.cn/cn/api-reference/chat-completions/chat-completions?playground=open

获取APIKEY ，https://cloud.siliconflow.cn/account/ak

如果不使用openai默认的几个模型，需要手动配置model_info

model_info文档：https://autogen.linsoap.social/autogen/stable/reference/python/autogen_core.models.html#autogen_core.models.ModelInfo

这里使用qwen3的模型，这个模型支持function_calling,structed_output。

openai_client = OpenAIChatCompletionClient(
    model="Qwen/Qwen3-30B-A3B",
    api_key="你的apikey",
    base_url="https://api.siliconflow.cn/v1/",
    model_info={
        "vision": False,
        "function_calling": True,
        "json_output": False,
        "family": "qwen",
        "structured_output": True,
        "multiple_system_messages": True,
    },
)
2.tools配置
2.1 Autogen Tools
参考文档：

https://autogen.linsoap.social/autogen/stable/user-guide/agentchat-user-guide/tutorial/agents.html#function-tool

这一步可以让模型拥有了除了简单对话之外的能力，例如获取当前的天气，写入文本到一个文件中。

autogen支持把python函数作为agent的tools使用，例如这个获取天气的tools，其中有两个比较关键的部分，分别是传入参数和函数注释

async def get_weather(city: str) -> str:
    """根据传入的city返回当前城市的天气"""
    return f" {city} 的天气是晴天，气温 25°C。" 
这个函数的传入参数是city，这个工具的描述是"""根据传入的city返回当前城市的天气"""。这个工具描述需要描述这个函数需要传入的参数，以及这个函数的作用。这会注册到agent的工具库中，当agent根据上下文意识到需要获取天气信息，就会调用这个函数，以及调用这个函数需要生成什么样的参数，这都是通过函数注释告诉给agent的。

2.2 MCP
MCP的概念

https://www.bilibili.com/video/BV1Cm7pzhExL/?spm_id_from=333.337.search-card.all.click

https://modelcontextprotocol.io/introduction

检查器

https://modelcontextprotocol.io/docs/tools/inspector

一些官方MCP样例

https://modelcontextprotocol.io/examples

Autogen同样也是支持MCP调用的，建议在使用Autogen的workbench的时候，先使用inspector检查环境是否能用MCP，再在workbench中使用。以下是在autogen中使用MCP的官方样例

https://autogen.linsoap.social/autogen/stable/user-guide/agentchat-user-guide/tutorial/agents.html#model-context-protocol-mcp-workbench

大家可以在官方的MCP样例中自己找一些感兴趣的尝试。不过需要注意，目前Autogen中MCP和Tool只能同时启用其中一个。

3.Agent配置
参考文档：

https://autogen.linsoap.social/autogen/stable/user-guide/agentchat-user-guide/tutorial/agents.html#assistant-agent

完成model_client和tools的配置后，就可以开始配置agent了

name：目前对于单agent任务没有什么作用，主要在多agent中作为标识

model_client：Agent所使用的模型

tools：agent能够使用的tools

system_message：agent的系统提示词，约定agent做什么样的任务

agent = AssistantAgent(
    name="assistant",
    model_client=model_client,
    tools=[get_weather],
    system_message="在必要时使用工具解决用户的需求",
)
完成agent的配置后，可以使用run方法运行agent，参考文档https://autogen.linsoap.social/autogen/stable/user-guide/agentchat-user-guide/tutorial/agents.html#getting-result

能够成功运行后，可以使用autogen的Console类在命令行中获取比较直观的输出结果，参考文档：https://autogen.linsoap.social/autogen/stable/user-guide/agentchat-user-guide/tutorial/agents.html#streaming-messages

至此，单agent任务运行就已经完成了。

下一步
1.在单agent任务中，agent可以拥有不止一个tools，这个tools可以进行读操作，也可以进行写操作。编写更多的函数，丰富这个agent的能力。

2.尝试修改system_message和函数注释，思考如何在agent拥有很多tools的时候，仍然能准确、正确的调用tools







运行结果:

root@FerrW:~/autogen# /root/miniconda3/envs/autogen/bin/python /root/autogen/learning-autogen/autogen-lab/utils/demo01/demo01.py
---------- TextMessage (user) ----------
现在是什么时候? 杭州今天天气怎么样, 要戴口罩吗? 
---------- ModelClientStreamingChunkEvent (weather_agent) ----------
<think>
好的，我现在需要处理用户的两个问题：首先，用户问“现在是什么时候？”，这需要调用获取当前时间的函数。其次，用户询问“杭州今天天气怎么样，要戴口罩吗？”，这需要先获取杭州的天气信息，然后根据天气情况判断是否需要戴口罩。

首先，对于“现在是什么时候？”，我应该使用get_time函数。这个函数不需要任何参数，所以直接调用即可。接下来是杭州的天气，用户可能想知道温度、湿度、风力等信息，但根据提供的工具，只有get_weather和get_humidity函数可用。不过get_weather的参数是城市，所以先调用get_weather来获取杭州的天气情况。然后，可能需要结合湿度信息来判断是否需要戴口罩，比如如果湿度高，可能需要戴口罩，或者是否有其他天气因素，如雾霾、降雨等。但工具中没有直接提供是否需要戴口罩的判断函数，所以可能需要根据天气数据来推断。不过用户的问题可能期望的是直接回答是否需要戴口罩，可能需要先获取天气，再根据天气情况给出建议。但工具中可能没有直接的函数，因此可能需要调用get_weather和get_humidity两个函数，然后再综合判断。

但是用户的问题中，第二个部分是“要戴口罩吗？”，这可能需要根据天气中的某些指标，比如空气质量、湿度、是否有雨等。但根据现有的工具，可能只有天气情况和湿度的信息。例如，如果天气晴朗，可能不需要戴口罩；如果下雨或者湿度高，可能需要。不过具体需要看函数返回的数据。所以可能需要先调用get_weather获取杭州的天气，再调用get_humidity获取湿度，然后根据这两个结果来决定是否需要戴口罩。或者可能用户认为只要知道天气情况就可以判断，比如如果天气不好，可能建议戴口罩。但这里可能需要明确回答，所以可能需要先获取天气信息，再结合湿度信息。

不过用户的问题可能希望先回答时间，然后回答天气和口罩建议。所以步骤应该是：

1. 调用get_time获取当前时间。
2. 调用get_weather获取杭州天气。
3. 调用get_humidity获取杭州湿度。
4. 根据天气和湿度数据判断是否需要戴口罩。

不过用户的问题可能希望先回答时间，然后回答天气情况和是否需要戴口罩。因此需要先处理时间，然后处理天气和湿度。但可能需要先调用get_weather和get_humidity两个函数，再综合回答。不过由于用户的问题中这两个部分是连在一起的，可能需要先获取天气，再获取湿度，或者同时调用。

但根据工具的参数，get_weather的参数是city，所以需要传入“杭州”作为参数。而get_humidity的参数是location，可能也是“杭州”。所以需要调用这两个函数，然后根据结果给出建议。例如，如果湿度很高，或者天气情况不好，可能需要建议戴口罩。但具体如何判断可能需要依赖函数返回的数据，比如天气描述中是否有需要戴口罩的提示，或者湿度是否达到某个阈值。

不过用户可能没有明确说明需要具体指标，所以可能需要先获取天气信息，然后根据天气情况给出是否需要戴口罩的建议。例如，如果天气是晴天，可能不需要；如果有雨或雾霾，可能需要。但如果没有具体的空气质量数据，可能需要根据其他因素。或者可能用户认为只要湿度高就需要戴口罩，但实际情况可能不同。所以可能需要先调用get_weather和get_humidity，然后综合两者的信息。

不过根据工具的描述，可能每个函数返回的数据是独立的，所以需要分别调用。所以正确的步骤是：

首先调用get_time获取当前时间，然后调用get_weather获取杭州天气，接着调用get_humidity获取杭州湿度，最后根据这些数据回答用户的问题。
</think>


---------- ToolCallRequestEvent (weather_agent) ----------
[FunctionCall(id='0197817c6845424bc4360c867c0c79eb', arguments=' {}', name='get_time'), FunctionCall(id='0197817c6a2f429acb3eaf5d3eb44008', arguments=' {"city": "杭州"}', name='get_weather'), FunctionCall(id='0197817c6c3b216a79426a613d60403c', arguments=' {"location": "杭州"}', name='get_humidity')]
---------- ToolCallExecutionEvent (weather_agent) ----------
[FunctionExecutionResult(content="It's now 8:10.", name='get_time', call_id='0197817c6845424bc4360c867c0c79eb', is_error=False), FunctionExecutionResult(content='杭州天气预报：晴天，26℃', name='get_weather', call_id='0197817c6a2f429acb3eaf5d3eb44008', is_error=False), FunctionExecutionResult(content='杭州当前空气湿度：68%（潮湿）', name='get_humidity', call_id='0197817c6c3b216a79426a613d60403c', is_error=False)]
---------- ModelClientStreamingChunkEvent (weather_agent) ----------
<think>
好的，现在用户问现在是什么时候，杭州今天的天气怎么样，以及是否需要戴口罩。首先，我需要调用三个不同的工具来获取信息：时间、天气和湿度。

首先，用户问现在的时间，所以我调用get_time工具，返回当前时间是8:10。接着，用户想知道杭州的天气，调用get_weather工具，得到晴天，26℃。然后，用户问是否需要戴口罩，这可能需要考虑湿度和天气情况。调用get_humidity工具，得到湿度68%，属于潮湿。

接下来，我需要综合这些信息来回答用户的问题。时间部分已经明确，天气是晴天，温度26度，湿度68%。关于是否需要戴口罩，通常口罩在空气质量不好或湿度高时建议佩戴，但这里天气是晴天，可能空气质量不错，但湿度较高。不过根据中国的常规建议，晴天通常不需要戴口罩，除非有特殊原因，比如花粉过敏或者空气质量差。但用户可能担心的是湿度高是否需要戴口罩，比如防止呼吸道不适。不过一般情况下，湿度高不会直接导致需要戴口罩，除非有特定的健康考虑。所以可能需要告诉用户根据当前天气情况，不需要戴口罩，但如果有特殊需求可以自行决定。

需要确保回答准确，同时避免过度解读。可能用户所在地区有特殊的空气质量情况，但根据提供的工具数据，天气是晴天，湿度68%，所以综合判断不需要戴口罩。最后用简洁的中文回复用户的问题。
</think>

现在是早上8:10。杭州今天天气晴朗，气温26℃，空气湿度为68%（潮湿）。根据当前天气情况，日常出行通常不需要戴口罩，但若您有特殊健康需求（如呼吸道敏感），可根据自身情况决定是否佩戴。
---------- TextMessage (weather_agent) ----------


现在是早上8:10。杭州今天天气晴朗，气温26℃，空气湿度为68%（潮湿）。根据当前天气情况，日常出行通常不需要戴口罩，但若您有特殊健康需求（如呼吸道敏感），可根据自身情况决定是否佩戴。